{"ast":null,"code":"export default {\n  name: \"data-sub-section\",\n  props: {\n    no: Number\n  },\n\n  data() {\n    return {\n      list: []\n    };\n  },\n\n  methods: {},\n\n  created() {\n    // Here we define our query as a multi-line string\n    // Storing it in a separate .graphql/.gql file is also possible\n    var query = `\nquery ($id: Int) { # Define which variables will be used in the query (id)\n  Media (id: $id, type: ANIME) { # Insert our variables into the query arguments (id) (type: ANIME is hard-coded in the query)\n    id\n    title {\n      romaji\n      english\n      native\n    }\n  }\n}\n`; // Define our query variables and values that will be used in the query request\n\n    var variables = {\n      id: 15125\n    }; // Define the config we'll need for our Api request\n\n    var url = \"https://graphql.anilist.co\",\n        options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        query: query,\n        variables: variables\n      })\n    }; // Make the HTTP Api request\n\n    fetch(url, options).then(handleResponse).then(handleData).catch(handleError);\n\n    function handleResponse(response) {\n      return response.json().then(function (json) {\n        return response.ok ? json : Promise.reject(json);\n      });\n    }\n\n    function handleData(data) {\n      console.log(data);\n    }\n\n    function handleError(error) {\n      alert(\"Error, check console\");\n      console.error(error);\n    }\n  }\n\n};","map":{"version":3,"mappings":"AAcA,eAAe;AACbA,MAAI,EAAE,kBADO;AAEbC,OAAK,EAAE;AACLC,MAAE,EAAEC;AADC,GAFM;;AAKbC,MAAI,GAAG;AACL,WAAO;AACLC,UAAI,EAAE;AADD,KAAP;AAGD,GATY;;AAUbC,SAAO,EAAE,EAVI;;AAWbC,SAAO,GAAG;AACR;AACA;AACA,QAAIC,KAAI,GAAI;AAChB;;;;;;;;;AASA;AACA,CAXI,CAHQ,CAgBR;;AACA,QAAIC,SAAQ,GAAI;AACdC,QAAE,EAAE;AADU,KAAhB,CAjBQ,CAqBR;;AACA,QAAIC,GAAE,GAAI,4BAAV;AAAA,QACEC,OAAM,GAAI;AACRC,YAAM,EAAE,MADA;AAERC,aAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,cAAM,EAAE;AAFD,OAFD;AAMRC,UAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,aAAK,EAAEA,KADY;AAEnBC,iBAAS,EAAEA;AAFQ,OAAf;AANE,KADZ,CAtBQ,CAmCR;;AACAU,SAAK,CAACR,GAAD,EAAMC,OAAN,CAAL,CACGQ,IADH,CACQC,cADR,EAEGD,IAFH,CAEQE,UAFR,EAGGC,KAHH,CAGSC,WAHT;;AAKA,aAASH,cAAT,CAAwBI,QAAxB,EAAkC;AAChC,aAAOA,QAAQ,CAACC,IAAT,GAAgBN,IAAhB,CAAqB,UAAUM,IAAV,EAAgB;AAC1C,eAAOD,QAAQ,CAACE,EAAT,GAAcD,IAAd,GAAqBE,OAAO,CAACC,MAAR,CAAeH,IAAf,CAA5B;AACD,OAFM,CAAP;AAGF;;AAEA,aAASJ,UAAT,CAAoBlB,IAApB,EAA0B;AACxB0B,aAAO,CAACC,GAAR,CAAY3B,IAAZ;AACF;;AAEA,aAASoB,WAAT,CAAqBQ,KAArB,EAA4B;AAC1BC,WAAK,CAAC,sBAAD,CAAL;AACAH,aAAO,CAACE,KAAR,CAAcA,KAAd;AACF;AACD;;AAlEY,CAAf","names":["name","props","no","Number","data","list","methods","created","query","variables","id","url","options","method","headers","Accept","body","JSON","stringify","fetch","then","handleResponse","handleData","catch","handleError","response","json","ok","Promise","reject","console","log","error","alert"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\vue\\clone-anilist\\src\\components\\AnimeSubSection.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <img\r\n      src=\"https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx141014-eRFDPNpf3hI7.jpg\"\r\n      alt=\"\"\r\n      class=\"rounded-md w-72 my-5\"\r\n    />\r\n    <div class=\"capitalize anime-name\">\r\n      {{}}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"data-sub-section\",\r\n  props: {\r\n    no: Number,\r\n  },\r\n  data() {\r\n    return {\r\n      list: [],\r\n    };\r\n  },\r\n  methods: {},\r\n  created() {\r\n    // Here we define our query as a multi-line string\r\n    // Storing it in a separate .graphql/.gql file is also possible\r\n    var query = `\r\nquery ($id: Int) { # Define which variables will be used in the query (id)\r\n  Media (id: $id, type: ANIME) { # Insert our variables into the query arguments (id) (type: ANIME is hard-coded in the query)\r\n    id\r\n    title {\r\n      romaji\r\n      english\r\n      native\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\n    // Define our query variables and values that will be used in the query request\r\n    var variables = {\r\n      id: 15125,\r\n    };\r\n\r\n    // Define the config we'll need for our Api request\r\n    var url = \"https://graphql.anilist.co\",\r\n      options = {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          query: query,\r\n          variables: variables,\r\n        }),\r\n      };\r\n\r\n    // Make the HTTP Api request\r\n    fetch(url, options)\r\n      .then(handleResponse)\r\n      .then(handleData)\r\n      .catch(handleError);\r\n\r\n    function handleResponse(response) {\r\n      return response.json().then(function (json) {\r\n        return response.ok ? json : Promise.reject(json);\r\n      });\r\n    }\r\n\r\n    function handleData(data) {\r\n      console.log(data);\r\n    }\r\n\r\n    function handleError(error) {\r\n      alert(\"Error, check console\");\r\n      console.error(error);\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"]},"metadata":{},"sourceType":"module"}