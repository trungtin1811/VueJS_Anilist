{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx141014-eRFDPNpf3hI7.jpg\",\n  alt: \"\",\n  class: \"rounded-md w-72 my-5\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = {\n  class: \"capitalize anime-name\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, _toDisplayString(), 1\n  /* TEXT */\n  )]);\n}","map":{"version":3,"mappings":";;gCAEIA,oBAIE,KAJF,EAIE;AAHAC,KAAG,EAAC,yFAGJ;AAFAC,KAAG,EAAC,EAEJ;AADAC,OAAK,EAAC;AACN,CAJF;;AAAA;;;AAKKA,OAAK,EAAC;;;uBANbC,oBASM,KATN,EASM,IATN,EASM,CARJC,UAQI,EAHJL,oBAEM,KAFN,cAEMM,kBAFN,EACI;AAAA;AADJ,GAGI,CATN","names":["_createElementVNode","src","alt","class","_createElementBlock","_hoisted_1","_toDisplayString"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\vue\\clone-anilist\\src\\components\\AnimeSubSection.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <img\r\n      src=\"https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx141014-eRFDPNpf3hI7.jpg\"\r\n      alt=\"\"\r\n      class=\"rounded-md w-72 my-5\"\r\n    />\r\n    <div class=\"capitalize anime-name\">\r\n      {{}}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"data-sub-section\",\r\n  props: {\r\n    no: Number,\r\n  },\r\n  data() {\r\n    return {\r\n      list: [],\r\n    };\r\n  },\r\n  methods: {},\r\n  created() {\r\n    // Here we define our query as a multi-line string\r\n    // Storing it in a separate .graphql/.gql file is also possible\r\n    var query = `\r\nquery ($id: Int) { # Define which variables will be used in the query (id)\r\n  Media (id: $id, type: ANIME) { # Insert our variables into the query arguments (id) (type: ANIME is hard-coded in the query)\r\n    id\r\n    title {\r\n      romaji\r\n      english\r\n      native\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\n    // Define our query variables and values that will be used in the query request\r\n    var variables = {\r\n      id: 15125,\r\n    };\r\n\r\n    // Define the config we'll need for our Api request\r\n    var url = \"https://graphql.anilist.co\",\r\n      options = {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          query: query,\r\n          variables: variables,\r\n        }),\r\n      };\r\n\r\n    // Make the HTTP Api request\r\n    fetch(url, options)\r\n      .then(handleResponse)\r\n      .then(handleData)\r\n      .catch(handleError);\r\n\r\n    function handleResponse(response) {\r\n      return response.json().then(function (json) {\r\n        return response.ok ? json : Promise.reject(json);\r\n      });\r\n    }\r\n\r\n    function handleData(data) {\r\n      console.log(data);\r\n    }\r\n\r\n    function handleError(error) {\r\n      alert(\"Error, check console\");\r\n      console.error(error);\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"]},"metadata":{},"sourceType":"module"}